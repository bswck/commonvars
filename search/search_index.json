{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"proxyvars","text":"<p>Callback-based object proxies in Python.</p>"},{"location":"#example-usage","title":"Example Usage","text":"<p>The library might have many use cases.</p>"},{"location":"#asynchronous-apps","title":"Asynchronous Apps","text":"<p>Imagine a web app that processes many requests asynchronously. A fun design we can learn from contextvars is that we can run request handlers in proper contexts with all the request-related data held in context variables instead of requiring endpoint functions to accept parameters like <code>request</code>. This approach heavily used in Flask, where one can access request data using a global proxy <code>flask.request</code>. With bare contextvars, we could achieve this:</p> <pre><code>from contextvars import ContextVar\nfrom proxyvars import proxy\nfrom asgi_framework import App  # some random ASGI web framework\n\nclass Request:\n    args: dict[str, str]\n    headers: dict[str, str]\n    data: str\n    # etc...\n\nrequest_context: ContextVar[Request] = ContextVar(\"request_context\")\napp = App()\n\n# the app will manage to set the appropriate Request object in the context\n# before actually triggering the index() coroutine\n@app.get(\"/\")\nasync def echo():\n    request: Request = request_context.get()\n    # do something with request...\n    return request.data\n</code></pre> <p>With proxyvars, we can skip the assignment and simply create a dynamic-lookup proxy: <pre><code># below the Request class\nrequest = lookup_proxy(request_context)\n\n@app.get(\"/\")\nasync def echo():\n    return request.data  # request delegated attribute access to request_context.get()\n</code></pre></p>"},{"location":"#flexible-global-state","title":"Flexible \"Global\" State","text":"<p>One of the crucial caveats of using global variables is reduction of modularity and flexibility. Typically we want to test our code in an easily-parametrizable environment, which becomes unobvious in case of some global state that other parts of your program might depend on. Problems arise in multi-threaded or asynchronous applications, where some global data typically should be thread- or task-local. Python offers threading.local and contextvars (respectively) for achieving these goals.</p> <p>But sometimes global state is just the most convenient solution. Imagine running an app with a core <code>App</code> class with a config read from a file. We don't want to populate the configuration into attributes of the <code>App</code> instance and rather store configuration data properly in a class named <code>Config</code>.</p> <p>We can store <code>Config</code> instance as an attribute <code>config</code> of our main class <code>App</code> that manages the whole application life cycle and then, everytime we need a config value, we can request the app's <code>config</code> attribute. With a lot of codebase, you can find this solution more and more tedious.</p> <p>Creating a global <code>app_config</code> variable, not bound to an app, is not a good direction either though. What if you want to 2 apps with distinct configurations? Will you modify the global <code>app_config</code> to the proper <code>Config</code> object everytime?</p>"},{"location":"#get-that-global-experience-with-proxyvars","title":"Get That \"Global\" Experience With Proxyvars!","text":"<p>Simply create a global context variable.</p> <pre><code>app_config_var: ContextVar[Config] = ContextVar(\"app_config_var\")\napp_config: Config = lookup_proxy(app_config_var)\n</code></pre> <p>Now just run your tests in properly set-up contexts with <code>app_config_var</code> holding objects local to every thread, task or just a custom copy of the current context.</p>"},{"location":"#mutable-immutables","title":"Mutable Immutables","text":"<p>Ever dreamt of thread-safe, mutable integers in Python? I don't think anybody did, but it's possible with lookup proxies &amp; beloved contextvars just in case.</p> <pre><code>from contextvars import ContextVar\nfrom proxyvars import proxy\n\nmy_iq_var = ContextVar(\"my_iq_var\", 100)\nmy_iq = lookup_proxy(my_iq_var)\n\nprint(my_iq)  # 100\n\n# Users of proxyvars typically have 200 IQ. Patch our current variable.\nmy_iq_var.set(200)\n\nprint(my_iq)  # 200\n\n# Alright, let's be real. Assuming we have 200 IQ is a non-200 IQ behavior.\n# Subtract 60 IQ points. We are entitled to 140 as programmers.\nmy_iq -= 60\n\nprint(my_iq_var.get())  # 140\nprint(my_iq)  # 60\n</code></pre> <p>This way, we got a mutable immutable. Or, more correctly, we got a proxy object that can change its state which is represented by an immutable object.</p> <p>Have fun with proxyvars!</p>"},{"location":"#for-enterprise","title":"For Enterprise","text":"Available as part of the Tidelift Subscription.This project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use. Learn more here. <p>To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure.</p>"},{"location":"#installation","title":"Installation","text":"<p>You might simply install it with pip:</p> <pre><code>pip install proxyvars\n</code></pre> <p>If you use Poetry, then you might want to run:</p> <pre><code>poetry add proxyvars\n</code></pre>"},{"location":"#for-contributors","title":"For Contributors","text":"<p>Note</p> <p>If you use Windows, it is highly recommended to complete the installation in the way presented below through WSL2.</p> <ol> <li> <p>Fork the proxyvars repository on GitHub.</p> </li> <li> <p>Install Poetry.     Poetry is an amazing tool for managing dependencies &amp; virtual environments, building packages and publishing them.     You might use pipx to install it globally (recommended):</p> <pre><code>pipx install poetry\n</code></pre> <p><sub>If you encounter any problems, refer to the official documentation for the most up-to-date installation instructions.</sub></p> <p>Be sure to have Python 3.8 installed\u2014if you use pyenv, simply run:</p> <pre><code>pyenv install 3.8\n</code></pre> </li> <li> <p>Clone your fork locally and install dependencies.</p> <pre><code>git clone https://github.com/your-username/proxyvars path/to/proxyvars\ncd path/to/proxyvars\npoetry env use $(cat .python-version)\npoetry install\n</code></pre> <p>Next up, simply activate the virtual environment and install pre-commit hooks:</p> <pre><code>poetry shell\npre-commit install\n</code></pre> </li> </ol> <p>For more information on how to contribute, check out CONTRIBUTING.md. Always happy to accept contributions! \u2764\ufe0f</p>"},{"location":"#legal-info","title":"Legal Info","text":"<p>\u00a9 Copyright by Bartosz S\u0142awecki (@bswck). This software is licensed under the terms of MIT License.</p>"},{"location":"api/","title":"API Reference","text":"<p>Callback-based object proxies in Python.</p> <p>Classes:</p> <ul> <li> <code>MissingStateError</code>         \u2013          <p>Raised when a proxy object is accessed without a state.</p> </li> <li> <code>ProxyStateLookup</code>         \u2013          <p>A protocol for objects that looks up the state of a proxy every time it is accessed.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>proxy_descriptor</code>           \u2013            <p>Proxy descriptor factory for composing proxy classes on the fly.</p> </li> <li> <code>proxy</code>           \u2013            <p>Create a proxy object.</p> </li> <li> <code>const_proxy</code>           \u2013            <p>Create a proxy object that cheats class/instance checks with the given cls.</p> </li> <li> <code>lookup_proxy</code>           \u2013            <p>Create a proxy object that uses a <code>ProxyStateLookup</code> to lookup the state.</p> </li> <li> <code>proxy_field_accessor</code>           \u2013            <p>Create a proxy that accesses a (maybe nested) field of another proxy.</p> </li> </ul>"},{"location":"api/#proxyvars.MissingStateError","title":"<code>MissingStateError</code>","text":"<p>             Bases: <code>RuntimeError</code></p> <p>Raised when a proxy object is accessed without a state.</p>"},{"location":"api/#proxyvars.ProxyStateLookup","title":"<code>ProxyStateLookup</code>","text":"<p>             Bases: <code>Protocol[_T]</code></p> <p>A protocol for objects that looks up the state of a proxy every time it is accessed.</p> <p>If the state lookup fails, a <code>LookupError</code> must be raised. It is then converted to <code>MissingStateError</code> and handled by the proxy instance, which might be finally propagated to the caller.</p> <p>Note</p> <p>All <code>ContextVar</code> objects are valid proxy state lookups.</p> <p>Methods:</p> <ul> <li> <code>get</code>           \u2013            <p>Get the current state of the proxy.</p> </li> <li> <code>set</code>           \u2013            <p>Overwrite the current state of the proxy.</p> </li> </ul>"},{"location":"api/#proxyvars.ProxyStateLookup.get","title":"<code>get()</code>","text":"<p>Get the current state of the proxy.</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def get(self) -&gt; _T:\n    \"\"\"Get the current state of the proxy.\"\"\"\n</code></pre>"},{"location":"api/#proxyvars.ProxyStateLookup.set","title":"<code>set(value)</code>","text":"<p>Overwrite the current state of the proxy.</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def set(self, value: _T, /) -&gt; Any:\n    \"\"\"Overwrite the current state of the proxy.\"\"\"\n</code></pre>"},{"location":"api/#proxyvars.proxy_descriptor","title":"<code>proxy_descriptor(get_state, overwrite_state, *, class_value=_MISSING, implementation=_MISSING, try_state_first=False, on_missing_state=None, on_attribute_error=None, is_inplace_method=False)</code>","text":"<p>Proxy descriptor factory for composing proxy classes on the fly.</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def proxy_descriptor(  # noqa: C901\n    get_state: Callable[..., _T],\n    overwrite_state: Callable[[_T], None],\n    *,\n    class_value: object = _MISSING,\n    implementation: object = _MISSING,\n    try_state_first: bool = False,\n    on_missing_state: Callable[..., Any] | None = None,\n    on_attribute_error: Callable[..., Any] | None = None,\n    is_inplace_method: bool = False,\n) -&gt; Any:\n    \"\"\"Proxy descriptor factory for composing proxy classes on the fly.\"\"\"\n    attribute_name: str\n\n    class ProxyDescriptor:\n        \"\"\"\n        Descriptor that handles proxied attribute lookup.\n\n        Similar to `werkzeug.local._ProxyLookup`.\n        \"\"\"\n\n        def __set_name__(self, _: type[_T], name: str) -&gt; None:\n            nonlocal attribute_name\n            attribute_name = name\n\n        def __get__(self, instance: _T, _: type[_T] | None = None) -&gt; Any:  # noqa: C901\n            nonlocal attribute_name\n\n            if instance is None and class_value is not _MISSING:\n                return class_value\n\n            if try_state_first:\n                with suppress(MissingStateError):\n                    return getattr(get_state(), attribute_name)\n\n            if implementation is not _MISSING:\n                return implementation\n\n            try:\n                state = get_state()\n\n            except MissingStateError:\n                if not callable(on_missing_state):\n                    raise\n                attribute = on_missing_state\n\n            else:\n                try:\n                    attribute = getattr(state, attribute_name)\n                except AttributeError:\n                    if not callable(on_attribute_error):\n                        raise\n\n                    attribute = partial(on_attribute_error, state)\n\n            if is_inplace_method:\n\n                def inplace_method(*args: object, **kwargs: object) -&gt; _T:\n                    if not callable(attribute):\n                        msg = (\n                            f\"Cannot overwrite object {state!r} \"\n                            f\"because {attribute_name!r} is not a method \"\n                            \"(must be callable)\"\n                        )\n                        raise TypeError(msg)\n\n                    new_state = attribute(*args, **kwargs)\n                    overwrite_state(new_state)\n                    return instance\n\n                return inplace_method\n\n            return attribute\n\n        def __set__(self, _: object, value: object) -&gt; None:\n            nonlocal attribute_name\n            setattr(get_state(), attribute_name, value)\n\n        def __delete__(self, _: object) -&gt; None:\n            nonlocal attribute_name\n            delattr(get_state(), attribute_name)\n\n    return ProxyDescriptor()\n</code></pre>"},{"location":"api/#proxyvars.proxy","title":"<code>proxy(get_state, overwrite_state=None, cls=None, proxy_base_cls=object, proxy_metaclass=type, namespace_overwrites=None)</code>","text":"<p>Create a proxy object.</p> <p>Parameters:</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def proxy(\n    get_state: Callable[..., _T],\n    overwrite_state: Callable[[_T], None] | None = None,\n    cls: type[_T] | None = None,\n    proxy_base_cls: type[object] = object,\n    proxy_metaclass: type[type] = type,\n    namespace_overwrites: Mapping[str, object] | None = None,\n) -&gt; _T:\n    \"\"\"\n    Create a proxy object.\n\n    Parameters\n    ----------\n    get_state\n        A callable that returns the current state of the proxy.\n    overwrite_state\n        A callable that overwrites the current state of the proxy.\n        If not provided, the proxy is read-only and its state cannot be overwritten.\n    cls\n        The class of the object to be proxied.\n    proxy_base_cls\n        The base class of the proxy object.\n        This is useful if you want add custom descriptors to the result proxy object.\n    proxy_metaclass\n        The metaclass of the proxy object.\n        This is useful if you want add custom descriptors to the result proxy object.\n    namespace_overwrites\n        A mapping of attribute names to values that the namespace\n        of the Proxy class will be updated with before the class's creation.\n\n    \"\"\"\n    if overwrite_state is None:\n        overwrite_state = _readonly_proxy_overwrite_state\n\n    descriptor = partial(proxy_descriptor, get_state, overwrite_state)\n\n    class Proxy(\n        proxy_base_cls,  # type: ignore[misc,valid-type]\n        metaclass=lambda name, bases, namespace: proxy_metaclass(  # type: ignore[misc]\n            name,\n            bases,\n            {**namespace, **(namespace_overwrites or {})},\n        ),\n    ):\n        \"\"\"\n        A class whose instance proxies %(cls_name)s.\n\n        Similar to `werkzeug.local.LocalProxy`.\n        \"\"\"\n\n        if cls is None:\n            __doc__ = descriptor(\n                class_value=__doc__ and __doc__ % {\"cls_name\": \"other object\"},\n            )\n            __dir__ = descriptor()\n            __class__ = descriptor()\n        else:\n            __doc__ = descriptor(\n                class_value=__doc__ and __doc__ % {\"cls_name\": repr(cls.__name__)},\n            )\n            __dir__ = descriptor(on_missing_state=lambda: dir(cls))\n            __class__ = descriptor(implementation=cls)\n        __wrapped__ = descriptor()\n        __repr__, __str__ = repeat(\n            descriptor(\n                implementation=lambda: (\n                    \"&lt;object (no state)&gt;\"\n                    if cls is None\n                    else f\"&lt;{cls.__name__!r} object (no state)&gt;\"\n                ),\n                try_state_first=True,\n            ),\n            times=2,\n        )\n        __bytes__ = descriptor()\n        __format__ = descriptor()\n        __lt__ = descriptor()\n        __le__ = descriptor()\n        __eq__ = descriptor()\n        __ne__ = descriptor()\n        __gt__ = descriptor()\n        __ge__ = descriptor()\n        __hash__ = descriptor()\n        __bool__ = descriptor(\n            on_missing_state=lambda: False,\n            on_attribute_error=operator.truth,\n        )\n        __getattr__ = descriptor(\n            implementation=lambda name: getattr(get_state(), name),\n        )\n        __setattr__ = descriptor()\n        __delattr__ = descriptor()\n        __call__ = descriptor()\n        __instancecheck__ = descriptor()\n        __subclasscheck__ = descriptor()\n        __len__ = descriptor()\n        __length_hint__ = descriptor()\n        __getitem__ = descriptor(on_attribute_error=_try_classgetitem)\n        __setitem__ = descriptor()\n        __delitem__ = descriptor()\n        __iter__ = descriptor()\n        __next__ = descriptor()\n        __reversed__ = descriptor()\n        __contains__ = descriptor()\n        __add__ = descriptor()\n        __sub__ = descriptor()\n        __mul__ = descriptor()\n        __matmul__ = descriptor()\n        __truediv__ = descriptor()\n        __floordiv__ = descriptor()\n        __mod__ = descriptor()\n        __divmod__ = descriptor()\n        __pow__ = descriptor()\n        __lshift__ = descriptor()\n        __rshift__ = descriptor()\n        __and__ = descriptor()\n        __xor__ = descriptor()\n        __or__ = descriptor()\n        __radd__ = descriptor()\n        __rsub__ = descriptor()\n        __rmul__ = descriptor()\n        __rmatmul__ = descriptor()\n        __rtruediv__ = descriptor()\n        __rfloordiv__ = descriptor()\n        __rmod__ = descriptor()\n        __rdivmod__ = descriptor()\n        __rpow__ = descriptor()\n        __rlshift__ = descriptor()\n        __rrshift__ = descriptor()\n        __rand__ = descriptor()\n        __rxor__ = descriptor()\n        __ror__ = descriptor()\n        __iadd__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__add__\"),\n            is_inplace_method=True,\n        )\n        __isub__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__sub__\"),\n            is_inplace_method=True,\n        )\n        __imul__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__mul__\"),\n            is_inplace_method=True,\n        )\n        __imatmul__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__matmul__\"),\n            is_inplace_method=True,\n        )\n        __itruediv__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__truediv__\"),\n            is_inplace_method=True,\n        )\n        __ifloordiv__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__floordiv__\"),\n            is_inplace_method=True,\n        )\n        __imod__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__mod__\"),\n            is_inplace_method=True,\n        )\n        __ipow__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__pow__\"),\n            is_inplace_method=True,\n        )\n        __ilshift__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__lshift__\"),\n            is_inplace_method=True,\n        )\n        __irshift__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__rshift__\"),\n            is_inplace_method=True,\n        )\n        __iand__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__and__\"),\n            is_inplace_method=True,\n        )\n        __ixor__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__xor__\"),\n            is_inplace_method=True,\n        )\n        __ior__ = descriptor(\n            on_attribute_error=_binary_op_use_instead(\"__or__\"),\n            is_inplace_method=True,\n        )\n        __neg__ = descriptor()\n        __pos__ = descriptor()\n        __abs__ = descriptor()\n        __invert__ = descriptor()\n        __complex__ = descriptor()\n        __int__ = descriptor()\n        __float__ = descriptor()\n        __index__ = descriptor()\n        __round__ = descriptor()\n        __trunc__ = descriptor()\n        __floor__ = descriptor()\n        __ceil__ = descriptor()\n        __enter__ = descriptor()\n        __exit__ = descriptor()\n        __await__ = descriptor()\n        __aiter__ = descriptor()\n        __anext__ = descriptor()\n        __aenter__ = descriptor()\n        __aexit__ = descriptor()\n        __copy__ = descriptor()\n        __deepcopy__ = descriptor()\n\n    if cls is not None:\n        Proxy.__name__ = Proxy.__qualname__ = cls.__name__\n    else:\n        Proxy.__name__ = Proxy.__qualname__ = f\"proxy_{id(Proxy):x}\"\n    return cast(_T, Proxy())\n</code></pre>"},{"location":"api/#proxyvars.proxy(get_state)","title":"<code>get_state</code>","text":"(<code>Callable[..., _T]</code>)         \u2013          <p>A callable that returns the current state of the proxy.</p>"},{"location":"api/#proxyvars.proxy(overwrite_state)","title":"<code>overwrite_state</code>","text":"(<code>Callable[[_T], None] | None</code>, default:                 <code>None</code> )         \u2013          <p>A callable that overwrites the current state of the proxy. If not provided, the proxy is read-only and its state cannot be overwritten.</p>"},{"location":"api/#proxyvars.proxy(cls)","title":"<code>cls</code>","text":"(<code>type[_T] | None</code>, default:                 <code>None</code> )         \u2013          <p>The class of the object to be proxied.</p>"},{"location":"api/#proxyvars.proxy(proxy_base_cls)","title":"<code>proxy_base_cls</code>","text":"(<code>type[object]</code>, default:                 <code>object</code> )         \u2013          <p>The base class of the proxy object. This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.proxy(proxy_metaclass)","title":"<code>proxy_metaclass</code>","text":"(<code>type[type]</code>, default:                 <code>type</code> )         \u2013          <p>The metaclass of the proxy object. This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.proxy(namespace_overwrites)","title":"<code>namespace_overwrites</code>","text":"(<code>Mapping[str, object] | None</code>, default:                 <code>None</code> )         \u2013          <p>A mapping of attribute names to values that the namespace of the Proxy class will be updated with before the class's creation.</p>"},{"location":"api/#proxyvars.const_proxy","title":"<code>const_proxy(state, cls, *, proxy_base_cls=object, proxy_metaclass=type, namespace_overwrites=None, weak=False, weakref_callback=None)</code>","text":"<p>Create a proxy object that cheats class/instance checks with the given cls.</p> <p>This proxy is guaranteed to refer to a state object with a constant ID.</p> <p>Parameters:</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def const_proxy(\n    state: object,\n    cls: type[_T],\n    *,\n    proxy_base_cls: type[object] = object,\n    proxy_metaclass: type[type] = type,\n    namespace_overwrites: Mapping[str, object] | None = None,\n    weak: bool = False,\n    weakref_callback: Callable[[object], None] | None = None,\n) -&gt; _T:\n    \"\"\"\n    Create a proxy object that cheats class/instance checks with the given cls.\n\n    This proxy is guaranteed to refer to a state object with a constant ID.\n\n    Parameters\n    ----------\n    state\n        The state of the proxy to point to.\n    cls\n        The class of the object to cheat class/instance checks with.\n    proxy_base_cls\n        The base class of the proxy object (default: `object`).\n        This is useful if you want add custom descriptors to the result proxy object.\n    weak\n        Whether to use a weak reference to the state.\n    weakref_callback\n        A callback that is called when the weak reference to the state is about\n        to expire. See [weakref.ref][] for details.\n    proxy_metaclass\n        The metaclass of the proxy object (default: `type`).\n        This is useful if you want add custom descriptors to the result proxy object.\n    namespace_overwrites\n        A mapping of attribute names to values that the namespace\n        of the Proxy class will be updated with before the class's creation.\n\n    \"\"\"\n    if weakref_callback and not weak:\n        msg = \"weakref_callback requires weak=True\"\n        raise ValueError(msg)\n\n    if weak:\n        get_state = partial(\n            _const_proxy_get_state_weak,\n            weakref.ref(state, weakref_callback),\n        )\n    else:\n        get_state = partial(_const_proxy_get_state, state)\n\n    return proxy(\n        cls=cls,\n        get_state=get_state,\n        overwrite_state=_readonly_proxy_overwrite_state,\n        proxy_base_cls=proxy_base_cls,\n        proxy_metaclass=proxy_metaclass,\n        namespace_overwrites=namespace_overwrites,\n    )\n</code></pre>"},{"location":"api/#proxyvars.const_proxy(state)","title":"<code>state</code>","text":"(<code>object</code>)         \u2013          <p>The state of the proxy to point to.</p>"},{"location":"api/#proxyvars.const_proxy(cls)","title":"<code>cls</code>","text":"(<code>type[_T]</code>)         \u2013          <p>The class of the object to cheat class/instance checks with.</p>"},{"location":"api/#proxyvars.const_proxy(proxy_base_cls)","title":"<code>proxy_base_cls</code>","text":"(<code>type[object]</code>, default:                 <code>object</code> )         \u2013          <p>The base class of the proxy object (default: <code>object</code>). This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.const_proxy(weak)","title":"<code>weak</code>","text":"(<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to use a weak reference to the state.</p>"},{"location":"api/#proxyvars.const_proxy(weakref_callback)","title":"<code>weakref_callback</code>","text":"(<code>Callable[[object], None] | None</code>, default:                 <code>None</code> )         \u2013          <p>A callback that is called when the weak reference to the state is about to expire. See weakref.ref for details.</p>"},{"location":"api/#proxyvars.const_proxy(proxy_metaclass)","title":"<code>proxy_metaclass</code>","text":"(<code>type[type]</code>, default:                 <code>type</code> )         \u2013          <p>The metaclass of the proxy object (default: <code>type</code>). This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.const_proxy(namespace_overwrites)","title":"<code>namespace_overwrites</code>","text":"(<code>Mapping[str, object] | None</code>, default:                 <code>None</code> )         \u2013          <p>A mapping of attribute names to values that the namespace of the Proxy class will be updated with before the class's creation.</p>"},{"location":"api/#proxyvars.lookup_proxy","title":"<code>lookup_proxy(state_lookup, cls=None, state_lookup_get_state=None, state_lookup_overwrite_state=None, *, proxy_base_cls=object, proxy_metaclass=type, namespace_overwrites=None)</code>","text":"<p>Create a proxy object that uses a <code>ProxyStateLookup</code> to lookup the state.</p> <p>Parameters:</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def lookup_proxy(\n    state_lookup: ProxyStateLookup[_T],\n    cls: type[_T] | None = None,\n    state_lookup_get_state: Callable[[ProxyStateLookup[_T]], _T] | None = None,\n    state_lookup_overwrite_state: Callable[[ProxyStateLookup[_T], _T], None]\n    | None = None,\n    *,\n    proxy_base_cls: type[object] = object,\n    proxy_metaclass: type[type] = type,\n    namespace_overwrites: Mapping[str, object] | None = None,\n) -&gt; _T:\n    \"\"\"\n    Create a proxy object that uses a `ProxyStateLookup` to lookup the state.\n\n    Parameters\n    ----------\n    state_lookup\n        The state lookup object. Must implement the `ProxyStateLookup` protocol.\n        It will be used to lookup the state of the proxy every time it is accessed.\n    cls\n        The class of the object to be proxied.\n    proxy_base_cls\n        The base class of the proxy object (default: `object`).\n        This is useful if you want add custom descriptors to the result proxy object.\n    proxy_metaclass\n        The metaclass of the proxy object (default: `type`).\n        This is useful if you want add custom descriptors to the result proxy object.\n    namespace_overwrites\n        A mapping of attribute names to values that the namespace\n        of the Proxy class will be updated with before the class's creation.\n    state_lookup_get_state\n        A callable that returns the current state of the proxy.\n        Defaults to `state_lookup.get`.\n    state_lookup_overwrite_state\n        A callable that overwrites the current state of the proxy.\n\n    \"\"\"\n    if state_lookup_get_state is None:\n        state_lookup_get_state = _lookup_proxy_get_state\n    get_state = partial(state_lookup_get_state, state_lookup)\n\n    if state_lookup_overwrite_state is None:\n        state_lookup_overwrite_state = _lookup_proxy_overwrite_state\n    overwrite_state = partial(state_lookup_overwrite_state, state_lookup)\n\n    if cls is None:\n        with suppress(MissingStateError):\n            cls = type(get_state())\n\n    return proxy(\n        cls=cls,\n        get_state=get_state,\n        overwrite_state=overwrite_state,\n        proxy_base_cls=proxy_base_cls,\n        proxy_metaclass=proxy_metaclass,\n        namespace_overwrites=namespace_overwrites,\n    )\n</code></pre>"},{"location":"api/#proxyvars.lookup_proxy(state_lookup)","title":"<code>state_lookup</code>","text":"(<code>ProxyStateLookup[_T]</code>)         \u2013          <p>The state lookup object. Must implement the <code>ProxyStateLookup</code> protocol. It will be used to lookup the state of the proxy every time it is accessed.</p>"},{"location":"api/#proxyvars.lookup_proxy(cls)","title":"<code>cls</code>","text":"(<code>type[_T] | None</code>, default:                 <code>None</code> )         \u2013          <p>The class of the object to be proxied.</p>"},{"location":"api/#proxyvars.lookup_proxy(proxy_base_cls)","title":"<code>proxy_base_cls</code>","text":"(<code>type[object]</code>, default:                 <code>object</code> )         \u2013          <p>The base class of the proxy object (default: <code>object</code>). This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.lookup_proxy(proxy_metaclass)","title":"<code>proxy_metaclass</code>","text":"(<code>type[type]</code>, default:                 <code>type</code> )         \u2013          <p>The metaclass of the proxy object (default: <code>type</code>). This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.lookup_proxy(namespace_overwrites)","title":"<code>namespace_overwrites</code>","text":"(<code>Mapping[str, object] | None</code>, default:                 <code>None</code> )         \u2013          <p>A mapping of attribute names to values that the namespace of the Proxy class will be updated with before the class's creation.</p>"},{"location":"api/#proxyvars.lookup_proxy(state_lookup_get_state)","title":"<code>state_lookup_get_state</code>","text":"(<code>Callable[[ProxyStateLookup[_T]], _T] | None</code>, default:                 <code>None</code> )         \u2013          <p>A callable that returns the current state of the proxy. Defaults to <code>state_lookup.get</code>.</p>"},{"location":"api/#proxyvars.lookup_proxy(state_lookup_overwrite_state)","title":"<code>state_lookup_overwrite_state</code>","text":"(<code>Callable[[ProxyStateLookup[_T], _T], None] | None</code>, default:                 <code>None</code> )         \u2013          <p>A callable that overwrites the current state of the proxy.</p>"},{"location":"api/#proxyvars.proxy_field_accessor","title":"<code>proxy_field_accessor(*path, proxy_var, cls=None, field_get_state=_proxy_field_get_state, field_overwrite_state=_proxy_field_overwrite_state, proxy_base_cls=object, proxy_metaclass=type, namespace_overwrites=None)</code>","text":"<p>Create a proxy that accesses a (maybe nested) field of another proxy.</p> <p>The valid usage of this function resembles the way to use the <code>AliasPath</code> class from Pydantic.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from types import SimpleNamespace\n&gt;&gt;&gt; proxy_var = proxy(lambda: [SimpleNamespace(attribute=[\"v1\", \"v2\"])])\n&gt;&gt;&gt; namespace = proxy_field_accessor(0, proxy_var=proxy_var)\n&gt;&gt;&gt; namespace\nnamespace(attribute=['v1', 'v2'])\n&gt;&gt;&gt; items = proxy_field_accessor(\"attribute\", proxy_var=namespace)\n&gt;&gt;&gt; items\n['v1', 'v2']\n</code></pre> <p>We can now use a full path to the item with:</p> <pre><code>&gt;&gt;&gt; items_again = proxy_field_accessor(0, \"attribute\", proxy_var=proxy_var)\n&gt;&gt;&gt; items_again\n['v1', 'v2']\n&gt;&gt;&gt; items_again[0]\n'v1'\n</code></pre> <p>Parameters:</p> Source code in <code>proxyvars/__init__.py</code> <pre><code>def proxy_field_accessor(\n    *path: object,\n    proxy_var: object,\n    cls: type[_T] | None = None,\n    field_get_state: Callable[[Any, object], object] = _proxy_field_get_state,\n    field_overwrite_state: Callable[\n        [Any, object, object],\n        None,\n    ] = _proxy_field_overwrite_state,\n    proxy_base_cls: type[object] = object,\n    proxy_metaclass: type[type] = type,\n    namespace_overwrites: Mapping[str, object] | None = None,\n) -&gt; _T:\n    \"\"\"\n    Create a proxy that accesses a (maybe nested) field of another proxy.\n\n    The valid usage of this function resembles the way to use [the `AliasPath` class\n    from Pydantic](https://docs.pydantic.dev/2.7/concepts/alias/#aliaspath-and-aliaschoices).\n\n    Examples\n    --------\n    &gt;&gt;&gt; from types import SimpleNamespace\n    &gt;&gt;&gt; proxy_var = proxy(lambda: [SimpleNamespace(attribute=[\"v1\", \"v2\"])])\n    &gt;&gt;&gt; namespace = proxy_field_accessor(0, proxy_var=proxy_var)\n    &gt;&gt;&gt; namespace\n    namespace(attribute=['v1', 'v2'])\n    &gt;&gt;&gt; items = proxy_field_accessor(\"attribute\", proxy_var=namespace)\n    &gt;&gt;&gt; items\n    ['v1', 'v2']\n\n    We can now use a full path to the item with:\n    &gt;&gt;&gt; items_again = proxy_field_accessor(0, \"attribute\", proxy_var=proxy_var)\n    &gt;&gt;&gt; items_again\n    ['v1', 'v2']\n    &gt;&gt;&gt; items_again[0]\n    'v1'\n\n    Parameters\n    ----------\n    path\n        The path to the field to be accessed.\n        Each item in the path can be either a string (for attribute access)\n        or an arbitrary object (for item access).\n        This behavior that treats strings specially might be customized\n        by passing custom `field_get_state` and `field_overwrite_state` functions.\n\n        For example, the path `(\"a\", 0, \"b\")` would be equivalent to\n        `proxy_var.a[0].b`. To change it the behavior to `proxy_var[\"a\"][0][\"b\"]`,\n        pass `field_overwrite_state=lambda o, f, v: o.__setitem__(o, f, v)`\n        to this function.\n    proxy_var\n        The proxy object to be accessed.\n    cls\n        The class of the object to be proxied.\n    field_get_state\n        A callable that gets a field from an object.\n        Defaults to `getattr` for strings and `.__getitem__()` otherwise.\n    field_overwrite_state\n        A callable that overwrites a field of an object.\n        Defaults to `setattr` for strings and `.__setitem__()` otherwise.\n    proxy_base_cls\n        The base class of the proxy object.\n        This is useful if you want add custom descriptors to the result proxy object.\n    proxy_metaclass\n        The metaclass of the proxy object.\n        This is useful if you want add custom descriptors to the result proxy object.\n    namespace_overwrites\n        A mapping of attribute names to values that the namespace\n        of the Proxy class will be updated with before the class's creation.\n\n    \"\"\"\n    if not path:\n        msg = \"proxy field path must not be empty\"\n        raise ValueError(msg)\n\n    def get_state() -&gt; _T:\n        return cast(_T, reduce(field_get_state, path, proxy_var))\n\n    def overwrite_state(state: _T) -&gt; None:\n        *path_there, last_field = path\n        last_item = proxy_var\n        if path_there:\n            last_item = reduce(field_get_state, path_there, proxy_var)\n        field_overwrite_state(last_item, last_field, state)\n\n    return proxy(\n        get_state,\n        overwrite_state,\n        cls=cls,\n        proxy_base_cls=proxy_base_cls,\n        proxy_metaclass=proxy_metaclass,\n        namespace_overwrites=namespace_overwrites,\n    )\n</code></pre>"},{"location":"api/#proxyvars.proxy_field_accessor(path)","title":"<code>path</code>","text":"(<code>object</code>, default:                 <code>()</code> )         \u2013          <p>The path to the field to be accessed. Each item in the path can be either a string (for attribute access) or an arbitrary object (for item access). This behavior that treats strings specially might be customized by passing custom <code>field_get_state</code> and <code>field_overwrite_state</code> functions.</p> <p>For example, the path <code>(\"a\", 0, \"b\")</code> would be equivalent to <code>proxy_var.a[0].b</code>. To change it the behavior to <code>proxy_var[\"a\"][0][\"b\"]</code>, pass <code>field_overwrite_state=lambda o, f, v: o.__setitem__(o, f, v)</code> to this function.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(proxy_var)","title":"<code>proxy_var</code>","text":"(<code>object</code>)         \u2013          <p>The proxy object to be accessed.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(cls)","title":"<code>cls</code>","text":"(<code>type[_T] | None</code>, default:                 <code>None</code> )         \u2013          <p>The class of the object to be proxied.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(field_get_state)","title":"<code>field_get_state</code>","text":"(<code>Callable[[Any, object], object]</code>, default:                 <code>_proxy_field_get_state</code> )         \u2013          <p>A callable that gets a field from an object. Defaults to <code>getattr</code> for strings and <code>.__getitem__()</code> otherwise.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(field_overwrite_state)","title":"<code>field_overwrite_state</code>","text":"(<code>Callable[[Any, object, object], None]</code>, default:                 <code>_proxy_field_overwrite_state</code> )         \u2013          <p>A callable that overwrites a field of an object. Defaults to <code>setattr</code> for strings and <code>.__setitem__()</code> otherwise.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(proxy_base_cls)","title":"<code>proxy_base_cls</code>","text":"(<code>type[object]</code>, default:                 <code>object</code> )         \u2013          <p>The base class of the proxy object. This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(proxy_metaclass)","title":"<code>proxy_metaclass</code>","text":"(<code>type[type]</code>, default:                 <code>type</code> )         \u2013          <p>The metaclass of the proxy object. This is useful if you want add custom descriptors to the result proxy object.</p>"},{"location":"api/#proxyvars.proxy_field_accessor(namespace_overwrites)","title":"<code>namespace_overwrites</code>","text":"(<code>Mapping[str, object] | None</code>, default:                 <code>None</code> )         \u2013          <p>A mapping of attribute names to values that the namespace of the Proxy class will be updated with before the class's creation.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog. This project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v0100-2024-05-09","title":"v0.10.0 (2024-05-09)","text":""},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li><code>proxy_attribute_accessor</code> and <code>proxy_item_accessor</code> functions.</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Doctests for <code>proxy_field_accessor</code>.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Improved documentation.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Relaxed supported Python versions to <code>&gt;=3.8</code> to avoid being an unsolvable dependency.</li> <li>Type-safety in tests.</li> </ul>"},{"location":"changelog/#v092-2024-02-16","title":"v0.9.2 (2024-02-16)","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Set supported Python version range to <code>&gt;=3.8,&lt;3.13</code> instead of <code>&gt;=3.8,&lt;=3.12</code> that semantically disallows <code>3.12</code> PATCH releases. (#11)</li> </ul>"},{"location":"changelog/#v091-2023-12-22","title":"v0.9.1 (2023-12-22)","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Upgraded the skeleton version.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>A bug when <code>__doc__</code> inside proxy is <code>None</code> but regardless attempted to be %-formatted.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at bartoszpiotrslawecki@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-proxyvars","title":"Contributing to proxyvars \ud83c\udf89","text":"<p>Contributions are very welcome. \ud83d\ude80</p> <p>There are many ways to contribute, ranging from writing tutorials and improving the documentation, to submitting bug reports and feature requests or writing code which can be incorporated into proxyvars.</p>"},{"location":"contributing/#report-bugs-and-request-features","title":"Report bugs and request features \ud83d\udc1b","text":"<p>Report these in the issue tracker. Relevant forms provide guidance on how to write a good bug report or feature request.</p>"},{"location":"contributing/#implement-new-features","title":"Implement new features \u2b50","text":"<p>Look here. Anything tagged with \"enhancement\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write documentation \ud83d\udcd6","text":"<p>The project could always use more documentation, whether as part of the official project docs. If you're interested in helping out, check the docs/ folder in the repository.</p>"},{"location":"contributing/#share-your-feedback","title":"Share your feedback \ud83c\udf0d","text":"<p>The best way to send feedback is to file an issue in the issue tracker.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are     welcome! \u2728</li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request guidelines \ud83d\udcdd","text":"<ol> <li> <p>Initially mark the PR as a draft, so that the maintainers know that you are making final touches.</p> </li> <li> <p>Ensure that the test coverage is not decreased. If you add a new feature, please add tests for it. Read more about coverage.</p> </li> <li> <p>Ensure that all GitHub checks pass. If they are disabled in your PR, ping the maintainers to request enabling them.</p> </li> <li> <p>Don't forget to link the relevant issue(s) in the PR description and describe the changes you made.</p> </li> </ol>"},{"location":"contributing/#get-started","title":"Get started! \ud83d\udd79\ufe0f","text":"<p>Ready to contribute? Here's a quick guide on how to set up proxyvars and make a change.</p> <p>Note</p> <p>If you use Windows, it is highly recommended to complete the installation in the way presented below through WSL2.</p> <ol> <li> <p>Fork the proxyvars repository on GitHub.</p> </li> <li> <p>Install Poetry.     Poetry is an amazing tool for managing dependencies &amp; virtual environments, building packages and publishing them.     You might use pipx to install it globally (recommended):</p> <pre><code>pipx install poetry\n</code></pre> <p><sub>If you encounter any problems, refer to the official documentation for the most up-to-date installation instructions.</sub></p> <p>Be sure to have Python 3.8 installed\u2014if you use pyenv, simply run:</p> <pre><code>pyenv install 3.8\n</code></pre> </li> <li> <p>Clone your fork locally and install dependencies.</p> <pre><code>git clone https://github.com/your-username/proxyvars path/to/proxyvars\ncd path/to/proxyvars\npoetry env use $(cat .python-version)\npoetry install\n</code></pre> <p>Next up, simply activate the virtual environment and install pre-commit hooks:</p> <pre><code>poetry shell\npre-commit install\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass all tests:</p> <pre><code>poe check\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add -A\ngit commit -m \"Short description of changes (50 chars max)\" -m \"Optional extended description\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"}]}